<?php

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use AppBundle\Form\ReservaType;
use AppBundle\Entity\Usuario;
use AppBundle\Entity\Reserva;

/**
 * @Route("/reservas")   // ruta que que se antepone a cada ruta de los action
 */
class GestionReservasController extends Controller {

    /**
     * @Route("/nueva", name="nuevaReserva")
     */
    public function nuevaReservaAction(Request $request) {

        $reserva = new Reserva();
        //construyendo el formulario

        $form = $this->createForm(ReservaType::class, $reserva);

        //Recogemos la información llenada en el formulario
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            //obtenemos el usuario desde los datos del usuario logueado
            $usuario = $this->getUser();
            //seteamos el usuario a la reserva
            $reserva->setUsuario($usuario);

            //Almacenar nueva tapa
            $em = $this->getDoctrine()->getManager();
            $em->persist($reserva);
            $em->flush();
            return $this->redirectToRoute('reservas');
        }

        // replace this example code with whatever you need
        return $this->render('gestionReservas/nuevaReserva.html.twig', array('form' => $form->createView()));
    }

    /**
     * @Route("/reservas", name="reservas")
     */
    public function reservasAction(Request $request) {
        $repository = $this->getDoctrine()->getRepository(Reserva::class);
        $reservas = $repository->findAll();
        return $this->render('gestionReservas/reservas.html.twig', array('reservas' => $reservas));
    }

    /**
     * @Route("/nuevaCategoria", name="nuevaCategoria")
     */
    public function nuevaCatAction(Request $request) {
        $categoria = new Categoria();
//construyendo el formulario
        $form = $this->createForm(CategoriaType::class, $categoria);

//Recogemos la información
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
//rellenar el entity Categotia
            $categoria = $form->getData();
            $fotoFile = $categoria->getFoto();

//Generamos un nombre unico par el archivo
            $fileName = $this->generateUniqueFileName() . '.' . $fotoFile->guessExtension();

//movemos el archivo de temporal al disco duro del servidor
            $fotoFile->move(
                    $this->getParameter('tapaImg_directory'), $fileName
            );

//le ponemos datos estaticos para que funcione por ahora
            $categoria->setFoto($fileName);

//Almacenar nueva tapa
            $em = $this->getDoctrine()->getManager();
            $em->persist($categoria);
            $em->flush();
            return $this->redirectToRoute('categoria', array('id' => $categoria->getId()));
        }

// replace this example code with whatever you need
        return $this->render('gestionTapas/nuevaCategoria.html.twig', array('form' => $form->createView()));
    }

    /**
     * @Route("/nuevoIngrediente", name="nuevoIngrediente")
     */
    public function nuevoIngrAction(Request $request) {
        $ingrediente = new Ingrediente();
//construyendo el formulario
        $form = $this->createForm(IngredienteType::class, $ingrediente);

//Recogemos la información
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

//rellenar el entity Ingrediente
            $ingrediente = $form->getData();

//Almacenar nuevo ingrediente
            $em = $this->getDoctrine()->getManager();
            $em->persist($ingrediente);
            $em->flush();
            return $this->redirectToRoute('ingrediente', array('id' => $ingrediente->getId()));
        }

// replace this example code with whatever you need
        return $this->render('gestionTapas/nuevoIngrediente.html.twig', array('form' => $form->createView()));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName() {
// md5() reduces the similarity of the file names generated by
// uniqid(), which is based on timestamps
        return md5(uniqid());
    }

}
